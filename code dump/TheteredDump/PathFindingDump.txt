using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public static class PathfindingScript
{
    static void PrintBoard(int[,] board)
    {
        string str = "";
        for (int i = 0; i < board.GetLength(0); i++)
        {
            for (int j = 0; j < board.GetLength(1); j++)
            {
                str += board[i, j].ToString();
            }
            str += "\n";
        }
        //Debug.Log(str);
    }
    public static int[,] GetPath(Type[,] board,point a,point b)
    {

        int[,] filtered = CreateBoard(board,new List<Type>() { Type.wall,Type.enemy,Type.hero,Type.destroyableWall });
        PrintBoard(filtered);
        List<point> checkList = new List<point>();
        List<point> nextCheckList = new List<point>();
        checkList.Add(b);
        while (checkList.Count != 0)
        {
            foreach (point p in checkList)
            {
                List<point> newPoints = GetNeighbours(filtered, p);
                if (newPoints.Count != 0)
                    foreach (point np in newPoints)
                    { 
                        nextCheckList.Add(np);
                    }
            }
            checkList = nextCheckList;
            nextCheckList=new List<point>();
        }
        PrintBoard(filtered);
        return filtered;
    }

    static int[,] CreateBoard(Type[,] board,List<Type>obstacles)
    {
        int[,] filtered = new int[board.GetLength(0), board.GetLength(1)];
        for(int i=0;i<board.GetLength(0);i++)
            for(int j = 0; j < board.GetLength(1); j++)
            {
                if (obstacles.Contains(board[i, j]))
                {
                    filtered[i, j] = -1;
                }
                else
                {
                    filtered[i, j] = 0;
                }
            }

        return filtered;
    }
    static List<point> GetNeighbours(int[,] board, point self)
    {
        List<point> pointList = new List<point>();
        if (CheckPoint(board, self.x, self.y + 1))
        {
            pointList.Add(new point(self.x, self.y + 1));
            board[self.y + 1, self.x]=board[self.y, self.x] + 1;
        }
        if (CheckPoint(board, self.x+1, self.y ))
        {
            pointList.Add(new point(self.x+1, self.y ));
            board[self.y, self.x + 1]=board[self.y, self.x]  + 1;
        }
        if (CheckPoint(board, self.x, self.y - 1))
        {
            pointList.Add(new point(self.x, self.y - 1));
            board[self.y - 1, self.x]=board[self.y, self.x] + 1;
        }
        if (CheckPoint(board, self.x-1, self.y ))
        {
            pointList.Add(new point(self.x-1, self.y ));
            board[self.y, self.x - 1]=board[self.y, self.x] + 1;
        }
        return pointList;
    }
    static bool PossibleCheck(int[,] board,int x,int y)
    {
        if (
            y < board.GetLength(0) &&
            x < board.GetLength(1) &&
            y >= 0 &&
            x >= 0 &&
            board[y,x]>-1 
            )
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    static bool CheckPoint(int[,]board,int x,int y)
    {
        if (
            y < board.GetLength(0) &&
            x < board.GetLength(1) &&
            y >= 0 &&
            x >= 0 &&
            board[y, x] == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static point MinPoint(int[,] board, point self)
    {

        point min=null;

        if (PossibleCheck(board, self.x, self.y + 1))
        {
            min = new point(self.x, self.y + 1);
        }

        if (PossibleCheck(board,self.x+1,self.y))
        {
            if (min == null)
            {
                min = new point(self.x+1, self.y);
            }
            else if( min!= null && board[min.y, min.x] > board[self.y , self.x+1])
            {
                min = new point(self.x + 1, self.y);
            }
        }
        if (PossibleCheck(board, self.x, self.y-1))
        {
            if (min == null)
            {
                min = new point(self.x , self.y-1);
            }
            else if (min != null && board[min.y, min.x] > board[self.y-1, self.x])
            {
                min = new point(self.x , self.y-1);
            }
        }
        if (PossibleCheck(board, self.x - 1, self.y))
        {
            if (min == null)
            {
                min = new point(self.x - 1, self.y);
            }
            else if (min != null && board[min.y, min.x] > board[self.y, self.x-1])
            {
                min = new point(self.x - 1, self.y);
            }
        }


        return min;
    }
}



//---------------------------------------------------------------------------------------------------------------------------
  protected void InitStep() //calculates all of the points
    {
        Debug.Log("INIT STEP");
        targetPoints.Clear();
        minValues.Clear();
        minPoints.Clear();
        pathBoards.Clear();
        foreach (BaseCharacter bc in EnemyController.targets)
        {
            targetPoints.Add(new point(bc.x, bc.y));
        }

        mapController.CreateLogicalBoard();

        foreach (point tp in targetPoints)
        {
            pathBoards.Add(PathfindingScript.GetPath(MapController.logicalBoard, new point(x, y), tp));
        }
        foreach (int[,] b in pathBoards)
        {
            //PrintBoard(b);
            point p = PathfindingScript.MinPoint(b, new point(x, y));
            p.value = b[p.y, p.x];
            minPoints.Add(p);
            minValues.Add(b[p.y, p.x]);
        }
    }
